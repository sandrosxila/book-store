{
  "root": true,
  "env": {
    "browser": true,
    "es6": true,
    "node": true,
    "jest": true
  },
  "settings": {
    "react": {
      "createClass": "createReactClass", // Regex for Component Factory to use,
      // default to "createReactClass"
      "pragma": "React", // Pragma to use, default to "React"
      "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // default to latest and warns if missing
      // It will default to "detect" in the future
      "flowVersion": "0.53" // Flow version
    },
    "propWrapperFunctions": [
      // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
      "forbidExtraProps",
      {
        "property": "freeze",
        "object": "Object"
      },
      {
        "property": "myFavoriteWrapper"
      },
      // for rules that check exact prop wrappers
      {
        "property": "forbidExtraProps",
        "exact": true
      }
    ],
    "componentWrapperFunctions": [
      // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
      "observer", // `property`
      {
        "property": "styled"
      }, // `object` is optional
      {
        "property": "observer",
        "object": "Mobx"
      },
      {
        "property": "observer",
        "object": "<pragma>"
      } // sets `object` to whatever value `settings.react.pragma` is set to
    ],
    "formComponents": [
      // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />
      "CustomForm",
      {
        "name": "Form",
        "formAttribute": "endpoint"
      }
    ],
    "linkComponents": [
      // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
      "Hyperlink",
      {
        "name": "Link",
        "linkAttribute": "to"
      }
    ]
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "files": ["*.ts", "*.tsx"],
    "project": "./tsconfig.json", // tells parser relative path of tsconfig.json
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "ignorePatterns": ["next.config.js", "jest.config.js", "jest.setup.js", "tailwind.config.js", "postcss.config.js"],
  // all configs (eslint-config-xxx) go here:
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking", // contains rules that specifically require type information
    "plugin:@next/next/recommended",
    "next", // https://github.com/vercel/next.js/blob/canary/packages/eslint-config-next/package.json
    "next/core-web-vitals"
  ],

  // all plugins (eslint-plugin-xxx) go here:
  "plugins": [
    "@typescript-eslint",
    "@next/eslint-plugin-next", // https://github.com/vercel/next.js/blob/canary/packages/eslint-plugin-next/lib/index.js
    "react",
    "react-hooks",
    "@typescript-eslint",
    "testing-library"
  ],

  "overrides": [
    // Only uses Testing Library lint rules in test files
    {
      "files": [
        "**/__tests__/**/*.[jt]s?(x)",
        "**/?(*.)+(spec|test).[jt]s?(x)"
      ],
      "extends": ["plugin:testing-library/react"]
    }
  ],

  "rules": {
    "indent": [
      "warn",
      4,
      {
        "SwitchCase": 1,
        "ignoredNodes": ["JSXElement"]
      }
    ],
    "quotes": ["warn", "single"],
    "semi": ["warn", "always"],
    "object-curly-spacing": ["warn", "always"],
    "brace-style": ["warn", "stroustrup"],
    "no-multi-spaces": "warn",
    "space-in-parens": ["warn", "never"],
    "arrow-spacing": [
      "warn",
      {
        "before": true,
        "after": true
      }
    ],
    "space-infix-ops": [
      "warn",
      {
        "int32Hint": false
      }
    ],
    "comma-spacing": [
      "warn",
      {
        "before": false,
        "after": true
      }
    ],
    "@typescript-eslint/type-annotation-spacing": [
      "warn",
      {
        "before": false,
        "after": true,
        "overrides": {
          "arrow": {
            "before": true,
            "after": true
          }
        }
      }
    ],
    "@typescript-eslint/object-curly-spacing": ["warn", "always"],
    "@typescript-eslint/indent": [
      "warn",
      4,
      {
        "SwitchCase": 1,
        "ignoredNodes": ["JSXElement"]
      }
    ],
    "@typescript-eslint/no-non-null-assertion": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/jsx-curly-newline": [
      "warn",
      {
        "multiline": "require",
        "singleline": "consistent"
      }
    ],
    "react/jsx-curly-spacing": [
      "warn",
      {
        "when": "always",
        "allowMultiline": true,
        "multilineText": true,
        "children": { "when": "always" }
      }
    ],
    "react/jsx-indent": [
      "warn",
      4,
      {
        "indentLogicalExpressions": true,
        "checkAttributes": false
      }
    ],
    "react/jsx-indent-props": ["warn", 4],
    "react/jsx-wrap-multilines": [
      "warn",
      {
        "declaration": "ignore",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line",
        "prop": "ignore"
      }
    ]
  }
}
